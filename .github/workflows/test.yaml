---
name: Module Tests

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
env:
  VAULT_ADDR: http://vault:8200
  VAULT_TOKEN: root
jobs:
  oidc:
    runs-on: ubuntu-latest
    # container:
    #   image: catthehacker/ubuntu:runner-latest # image with user 'runner:runner' built on tag 'act-latest'

    permissions:
      contents: read  # checkout repository
      id-token: write  # create


    services:
      vault:
        image: hashicorp/vault:latest
        ports:
          - 8200:8200
        env:
          VAULT_DEV_ROOT_TOKEN_ID: root
          VAULT_LOG_LEVEL: debug
        options: >-
          --cap-add=IPC_LOCK
      mariadb:
        image: mariadb:latest
        ports:
          - 3306
        env:
          MYSQL_USER: user
          MYSQL_PASSWORD: password
          MYSQL_DATABASE: test
          MYSQL_ROOT_PASSWORD: password
        options: --health-cmd="mysqladmin ping" --health-interval=5s --health-timeout=2s --health-retries=3
    steps:
      - uses: actions/checkout@v3
      - name: Verify MariaDB connection
        env:
          PORT: ${{ job.services.mariadb.ports[3306] }}
        run: |
          while ! mysqladmin ping -h"127.0.0.1" -P"$PORT" --silent; do
            sleep 1
          done
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.3
        with:
          terraform_wrapper: false

      - name: Verify MySQL connection from host
        run: |
          mysql --host 127.0.0.1 -uroot -proot -e "GRANT CREATE USER ON *.* TO 'vault-admin'@'%' REQUIRE NONE WITH GRANT OPTION MAX_QUERIES_PER_HOUR 0 MAX_CONNECTIONS_PER_HOUR 0 MAX_UPDATES_PER_HOUR 0 MAX_USER_CONNECTIONS 0;"
      # - name: Install Vault
      #   run: .github/scripts/install-vault.sh

      # This preconfigures Vault such that we can authenticate to a Vault role
      # and access secrets.
      - name: Setup Vault
        id: test
        run: |
          # .github/scripts/prepare-vault.sh

          cd examples/test
          terraform init
          terraform plan
          terraform apply -auto-approve
      - run: echo ${{ steps.test.outputs }}
      - run: echo ${{ steps.test.outputs }}
      - run: echo ${{ steps.test.outputs.stdout }}

      # We've configured Vault, so now let's act as a user and try to read secrets!
      #
      # See test/main.tf
      #
      # We've configured pull requests to be allowed to read the
      # secret path "secret/data/foo/bar".
      # We are unable to read "secret/data/main/secret".
      - name: Import Secrets
        uses: hashicorp/vault-action@v2
        id: secrets
        with:
          # exportEnv: false
          url: http://192.168.50.241:8200
          method: token
          token: root
          secrets: |
            database/creds/maginfo-wp-1 username | TEST

      # - name: Clear
      #   id: clear
      #   if: always()
      #   run: |
      #     cd examples/test
      #     terraform destroy -auto-approve -refresh=false
